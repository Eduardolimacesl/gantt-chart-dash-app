name: CI/CD Pipeline

on:
  push:
    branches:
      - main # Usar 'main' como a branch principal
  pull_request:
    branches:
      - main # Usar 'main' como a branch principal

jobs:
  build-and-test:
    runs-on: ubuntu-latest # O sistema operacional onde o job será executado

    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # Action para baixar o código do repositório

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x' # Use a versão do Python que você usa (ex: '3.9', '3.10', '3.11', '3.12')

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests (if applicable)
      run: python app.py
      # Nota: Certifique-se de que run_tests() no seu app.py retorne um código de saída diferente de zero em caso de falha
      # para que o GitHub Actions marque o job como falha. Atualmente, ele apenas imprime FALHA.
      # Uma forma simples é adicionar 'import sys' e chamar 'sys.exit(1)' em caso de falha no run_tests.

  deploy:
    # Garante que o deploy só roda se o job de testes passar
    needs: build-and-test
    runs-on: ubuntu-latest
    # Condição para deploy: só roda em push para a branch 'main' (não em Pull Requests)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Trigger Render Deploy
        # Usa um simples comando 'curl' para acionar a deploy hook.
        # Isso diz ao Render para baixar a última versão do código da branch 'main' e fazer o deploy.
        run: curl "${{ secrets.RENDER_DEPLOY_HOOK_URL }}"
        env:
          # Garante que o segredo está disponível como uma variável de ambiente para o comando curl
          RENDER_DEPLOY_HOOK_URL: ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
